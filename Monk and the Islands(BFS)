#include<bits/stdc++.h>
// #include <boost/algorithm/string.hpp> 
using namespace std;
 
#define ll 			long long int
#define phew 		ios_base::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL);
#define digi(n) 	floor(log10(n))+1
#define chota(s)    transform(s.begin(), s.end(), s.begin(), :: tolower);
#define bada(s)     transform(s.begin(), s.end(), s.begin(), :: toupper);
#define ones(n)		__builtin_popcount(n)
#define inf         2147483647
#define pb(n)		push_back(n)
// string str = to_string(num);  int num = std::atoi(str);
#define tot_char  256 
const ll mod = 1000000007;
const ll mod2 = 4294967296;

ll a[100001];
vector<int>ar[100001];
int visited[100001];
int color[100001];
int dist[100001];
int size;
ll maxd, maxn; 

void bfs(int start)
{
	// ---------------initialization part------------

	queue<int >q;
	q.push(start);
	visited[start] = 1;
	dist[start] = 0;

	// ---------------initialization part------------

	while(!q.empty())
	{
		int front = q.front();
		q.pop();
		for(auto x : ar[front])
		{
			if(visited[x] == 0)
			{
				q.push(x);
				dist[x] = dist[front] + 1;
				visited[x] = 1;
			}
		}
	}
}

int tests()
{
	// input section

	int n, m;
	cin>>n>>m;

	// we should clear our adjacency list and out visited array for every test cases
	
	for(int i=1; i<=n; i++)
	{
		visited[i] = 0;
		ar[i].clear(); 
	}

	// ----------------cleared---------------

	while(m--)
	{
		int g, h;
		cin>>g>>h;
		ar[h].pb(g), ar[g].pb(h);
	}
	bfs(1);
	cout<<dist[n]<<"\n";
   	return 0;
}
int main()
{
    phew
    // freopen("input.txt", "r", stdin);
	// freopen("prateek_output.txt", "w", stdout);
    // if we have multiple TCs
    int t;
    cin>>t;
    while(t--)
    {
        tests();
    }
    // // else
   	// tests();
    return 0;
}
