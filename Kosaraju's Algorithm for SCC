// APPLYING DFS ON 2D GRID GRAPH

#include<bits/stdc++.h>
using namespace std;
 
#define ll 			long long int
#define phew 		ios_base::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL);
#define digi(n) 	floor(log10(n))+1
#define chota(s)    transform(s.begin(), s.end(), s.begin(), :: tolower);
#define bada(s)     transform(s.begin(), s.end(), s.begin(), :: toupper);
#define ones(n)		__builtin_popcount(n)
#define inf         2147483647
#define pb(n)		push_back(n)
// string str = to_string(num);  int num = std::atoi(str);
#define tot_char  256 
const ll mod = 1000000007;
const ll mod2 = 4294967296;

// ll a[100001];
vector<int>ar[100001];
vector<int>order;
vector<int>scc;
vector<int>tr[100001];
int visited[100001];
int color[100001];
int dist[100001];
int level[100001];
int in[100001];
int out[100001];
set<int>articulation_point;
vector<int>prime;
ll maxd, maxn;
int timer, bachhe; 

// for 2d grid
bool visi[1001][1001];
int grid[1001][1001];
int dis[1001][1001];
int n, m, connected;
char c[31][31];

// order: up->right->down->left
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};
// --------******----------- 

void dfso(int node)
{
	visited[node] = 1;
	for(auto x : ar[node])
	{
		if(visited[x] == 0)
		{
			dfso(x);
		}
	}
	order.pb(node);
}
void dfsscc(int node)
{
	visited[node] = 1;
	for(auto x : tr[node])
	{
		if(visited[x] == 0)
		{
			dfsscc(x);
		}
	}
	scc.pb(node);
}
void tests()
{
	int n, m;
	cin>>n>>m;
	for(int i=1; i<=n; i++)
	{
		visited[i] = 0, ar[i].clear(), tr[i].clear();
	}
	order.clear();
	for(int i=1; i<=m; i++)
	{
		int a, b;
		cin>>a>>b;
		ar[a].pb(b);
		tr[b].pb(a);
	}
	for(int i=1; i<=n; i++)
	{
		if(visited[i] == 0)
		{
			dfso(i);
		}
	}
	for(int i=1; i<=n; i++)
	{
		visited[i] = 0;
	}
	for(int i=1; i<=n; i++)
	{
		if(visited[order[n-i]] == 0)
		{
			scc.clear();
			dfsscc(order[n-i]);
		}
		for(int i=0; i<scc.size(); i++)
		{
			cout<<scc[i]<<" ";
		}
		cout<<"\n";
	}


}

int main()
{
	phew;
	freopen("input.txt", "r", stdin);
	freopen("p_output.txt", "w", stdout);
	ll t;
	cin>>t;
	while(t--)
	{
		tests();
	}
	// tests();
    return 0;
}
