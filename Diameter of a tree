#include<bits/stdc++.h>
// #include <boost/algorithm/string.hpp> 
using namespace std;
 
#define ll 			long long int
#define phew 		ios_base::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL);
#define digi(n) 	floor(log10(n))+1
#define chota(s)    transform(s.begin(), s.end(), s.begin(), :: tolower);
#define bada(s)     transform(s.begin(), s.end(), s.begin(), :: toupper);
#define ones(n)		__builtin_popcount(n)
#define inf         2147483647
#define pb(n)		push_back(n)
// string str = to_string(num);  int num = std::atoi(str);
#define tot_char  256 
const ll mod = 1000000007;
const ll mod2 = 4294967296;

ll a[100001];
vector<int>ar[100001];
int visited[100001];
int color[100001];
int size;
ll maxd, maxn; 
// dfs code 
void dfs(int node, int d)
{
	visited[node] = 1;
	if(d > maxd)
	{
		maxd = d;
		maxn = node;
	}
	for(auto x : ar[node])
	{
		if(visited[x] == 0)
		{
			// using SSSP logic 
			dfs(x, d+1);
		}
	}
}
// dfs code end

int tests()
{ 
	// input section
	ll n, connected=0;
	cin>>n;
	ll m = n;
	for(ll i=1; i<=m; i++)
	{
		ll g, h;
		cin>>g>>h;
		ar[h].pb(g), ar[g].pb(h);
	}
	// input section completed

	// now going to find out the farthest node from
	// root( that will be one of the node that is present the path of diameter of the tree )
	
	maxd = -1;
	dfs(1, 0);
	
	// we got our node (yaayy!)

	for(ll i=1; i<=n; i++)
	{
		visited[i] = 0;
	}

	// here we are going to find out the diameter of our tree 

	maxd = -1;
	dfs(maxn, 0);

	// now you must hold my code because we got the diameter

	cout<<maxd<<"\n";
    return 0;
} 
int main()
{
    phew
    freopen("input.txt", "r", stdin);
	freopen("prateek_output.txt", "w", stdout);
    // if we have multiple TCs
    // ll t;
    // cin>>t;
    // while(t--)
    // {
    //     tests();
    // }
    // // else
   	tests();
    return 0;
}
