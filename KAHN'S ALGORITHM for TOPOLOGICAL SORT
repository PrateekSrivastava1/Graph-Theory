// KAHN'S ALGORITHM FOR TOPOLOGICAL SORT

#include<bits/stdc++.h>
using namespace std;
 
#define ll 			long long int
#define phew 		ios_base::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL);
#define digi(n) 	floor(log10(n))+1
#define chota(s)    transform(s.begin(), s.end(), s.begin(), :: tolower);
#define bada(s)     transform(s.begin(), s.end(), s.begin(), :: toupper);
#define ones(n)		__builtin_popcount(n)
#define inf         2147483647
#define pb(n)		push_back(n)
// string str = to_string(num);  int num = std::atoi(str);
#define tot_char  256 
const ll mod = 1000000007;
const ll mod2 = 4294967296;

// ll a[100001];
vector<int>ar[100001];
int visited[100001];
int color[100001];
int dist[100001];
int level[100001];
int in[100001];
int out[100001];
vector<int> sorted;
int dirn[100001];
set<int>articulation_point;
vector<int>prime;
ll maxd, maxn;
int timer;
void kahn(int n)
{
	queue<int>q;
	for(int i=1; i<=n; i++)
	{
		if(dirn[i] == 0)
		{
			q.push(i);
		}
	}
	while(!q.empty())
	{
		int fr = q.front();
		q.pop();
		sorted.pb(fr);
		for(auto x : ar[fr])
		{
			dirn[x]--;
			if(dirn[x] == 0)
			{
				q.push(x);
			}
		}
	}
} 
void tests()
{
	int n, m;
	cin>>n>>m;
	for(int i=1; i<=m; i++)
	{
		int c, d;
		cin>>c>>d;
		ar[c].pb(d);
		dirn[d]++;
	}
	kahn(n);
	for(int i=0; i<sorted.size(); i++)
	{
		cout<<sorted[i]<<"\n";
	}
}
int main()
{
	phew;
	freopen("input.txt", "r", stdin);
	freopen("prateek_output.txt", "w", stdout);
	// ll t;
	// cin>>t;
	// while(t--)
	// {
	// 	tests();
	// }
	tests();
    return 0;
}


