#include<bits/stdc++.h>
using namespace std;
 
#define ll 			long long int
#define phew 		ios_base::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL);
#define digi(n) 	floor(log10(n))+1
#define chota(s)    transform(s.begin(), s.end(), s.begin(), :: tolower);
#define bada(s)     transform(s.begin(), s.end(), s.begin(), :: toupper);
#define ones(n)		__builtin_popcount(n)
#define inf         2147483647
#define pb(n)		push_back(n)
// string str = to_string(num);  int num = std::atoi(str);
#define tot_char  256 
const ll mod = 1000000007;
const ll mod2 = 4294967296;

// ll a[100001];
vector<int>ar[100001];
int visited[100001];
int color[100001];
int dist[100001];
int level[100001];
vector<int>prime;
ll maxd, maxn; 


bool differbyone(int a, int b)
{
	int count = 0;
	while(a && b)
	{
		if(a%10 != b%10)
		{
			count++;
		}
		a /= 10, b /= 10;
		if(count > 1)
		{
			return false;
		}
	}
	return true;
}


bool isprime(int n)
{
	for(int i=2; i<=sqrt(n); i++)
	{
		if(n%i == 0)
		{
			return false;
		}
	}
	return true;
}


void creatinggraph()
{
	for(int i=1000; i<=9999; i++)
	{
		if(isprime(i))
		{
			prime.pb(i);
		}
	}
	for(int i=0; i<prime.size(); i++)
	{
		for(int j=i+1; j<prime.size(); j++)
		{
			if(differbyone(prime[i], prime[j]))
			{
				ar[prime[i]].pb(prime[j]), ar[prime[j]].pb(prime[i]);
			}
		}
	}
}


void bfs(int source)
{
	queue<int>q;
	q.push(source);
	visited[source] = 1;
	dist[source] = 0;
	while(!q.empty())
	{
		int fr = q.front();
		q.pop();
		for(auto x : ar[fr])
		{
			if(visited[x] == 0)
			{
				q.push(x);
				visited[x] = 1;
				dist[x] = dist[fr] + 1;
			}
		}
	}
}


int tests()
{
	for(int i=1000; i<=9999; i++)
	{
		dist[i] = -1;
		visited[i] = 0;
	}
	int a, b;
	cin>>a>>b;
	bfs(a);
	if(dist[b] == -1)
	{
		cout<<"Impossible"<<"\n";
	}
	else
	{
		cout<<dist[b]<<"\n";		
	}
	return 0;
}


int main()
{
    phew
    freopen("input.txt", "r", stdin);
	freopen("prateek_output.txt", "w", stdout);
    // if we have multiple TCs

	  creatinggraph();

    int t;
    cin>>t;
    while(t--)
    {
        tests();
    }
    // // else
   	// tests();
    return 0;
}
